//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.10

use chrono::{DateTime, Utc};
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "sys_dict_type")]
#[serde(rename_all = "camelCase")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub dict_id: i64,
    pub dict_name: Option<String>,
    #[sea_orm(unique)]
    pub dict_type: Option<String>,
    pub status: Option<String>,
    pub create_by: Option<String>,
    pub create_time: Option<DateTime<Utc>>,
    pub update_by: Option<String>,
    pub update_time: Option<DateTime<Utc>>,
    pub remark: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::dict_data::Entity")]
    DictData,
}

impl ActiveModelBehavior for ActiveModel {}
