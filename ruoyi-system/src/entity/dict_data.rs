//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.10

use chrono::{DateTime, Utc};
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "sys_dict_data")]
#[serde(rename_all = "camelCase")]
pub struct Model {
    /// 字典编码
    #[sea_orm(primary_key)]
    pub dict_code: i64,
    /// 字典排序
    pub dict_sort: Option<i32>,
    /// 字典标签
    pub dict_label: Option<String>,
    /// 字典键值
    pub dict_value: Option<String>,
    /// 字典类型
    pub dict_type: Option<String>,
    /// 样式属性
    pub css_class: Option<String>,
    /// 表格回显样式
    pub list_class: Option<String>,
    /// 是否默认
    pub is_default: Option<String>,
    /// 状态
    pub status: Option<String>,
    /// 创建者
    pub create_by: Option<String>,
    /// 创建时间
    pub create_time: Option<DateTime<Utc>>,
    /// 更新者
    pub update_by: Option<String>,
    /// 更新时间
    pub update_time: Option<DateTime<Utc>>,
    /// 备注
    pub remark: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::dict_type::Entity",
        from = "Column::DictType",
        to = "super::dict_type::Column::DictId"
    )]
    DictType,
}

impl Related<super::dict_type::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::DictType.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
