//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.10

use chrono::{DateTime, Utc};
use ruoyi_common::utils::time::serialize_optional_datetime;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "gen_table")]
#[serde(rename_all = "camelCase")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub table_id: i64,
    pub table_name: Option<String>,
    pub table_comment: Option<String>,
    pub sub_table_name: Option<String>,
    pub sub_table_fk_name: Option<String>,
    pub class_name: Option<String>,
    pub tpl_category: Option<String>,
    pub tpl_web_type: Option<String>,
    pub package_name: Option<String>,
    pub module_name: Option<String>,
    pub business_name: Option<String>,
    pub function_name: Option<String>,
    pub function_author: Option<String>,
    pub gen_type: Option<String>,
    pub gen_path: Option<String>,
    pub options: Option<String>,
    pub create_by: Option<String>,
    #[serde(
        skip_serializing_if = "Option::is_none",
        serialize_with = "serialize_optional_datetime"
    )]
    pub create_time: Option<DateTime<Utc>>,
    pub update_by: Option<String>,
    #[serde(
        skip_serializing_if = "Option::is_none",
        serialize_with = "serialize_optional_datetime"
    )]
    pub update_time: Option<DateTime<Utc>>,
    pub remark: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        has_many = "super::gen_table_column::Entity",
        from = "Column::TableId",
        to = "super::gen_table_column::Column::TableId"
    )]
    GenTableColumn,
}

impl Related<super::gen_table_column::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GenTableColumn.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

